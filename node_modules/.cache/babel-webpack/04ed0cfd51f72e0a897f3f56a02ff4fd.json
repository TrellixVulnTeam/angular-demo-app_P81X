{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\n\nfunction ForgotPasswordComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 14);\n    i0.ɵɵelementStart(2, \"div\", 15);\n    i0.ɵɵtext(3, \" Sorry, looks like there are some errors detected, please try again. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction ForgotPasswordComponent_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 16);\n    i0.ɵɵelementStart(2, \"div\", 17);\n    i0.ɵɵtext(3, \"Sent password reset. Please check your email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction ForgotPasswordComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 18);\n    i0.ɵɵtext(2, \" Please wait... \");\n    i0.ɵɵelement(3, \"span\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction ForgotPasswordComponent_ng_template_24_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelementStart(2, \"div\", 21);\n    i0.ɵɵelementStart(3, \"span\", 22);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const message_r6 = i0.ɵɵnextContext().message;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(message_r6);\n  }\n}\n\nfunction ForgotPasswordComponent_ng_template_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ForgotPasswordComponent_ng_template_24_ng_container_0_Template, 5, 1, \"ng-container\", 4);\n  }\n\n  if (rf & 2) {\n    const control_r5 = ctx.control;\n    const validation_r7 = ctx.validation;\n    i0.ɵɵproperty(\"ngIf\", control_r5.hasError(validation_r7) && (control_r5.dirty || control_r5.touched));\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"is-invalid\": a0,\n    \"is-valid\": a1\n  };\n};\n\nconst _c1 = function (a2) {\n  return {\n    validation: \"required\",\n    message: \"Email is required\",\n    control: a2\n  };\n};\n\nconst _c2 = function (a2) {\n  return {\n    validation: \"email\",\n    message: \"Email is invalid\",\n    control: a2\n  };\n};\n\nconst _c3 = function (a2) {\n  return {\n    validation: \"minLength\",\n    message: \"Email should have at least 3 symbols\",\n    control: a2\n  };\n};\n\nconst _c4 = function (a2) {\n  return {\n    validation: \"maxLength\",\n    message: \"Email should have maximum 360 symbols\",\n    control: a2\n  };\n};\n\nvar ErrorStates;\n\n(function (ErrorStates) {\n  ErrorStates[ErrorStates[\"NotSubmitted\"] = 0] = \"NotSubmitted\";\n  ErrorStates[ErrorStates[\"HasError\"] = 1] = \"HasError\";\n  ErrorStates[ErrorStates[\"NoError\"] = 2] = \"NoError\";\n})(ErrorStates || (ErrorStates = {}));\n\nexport class ForgotPasswordComponent {\n  constructor(fb, authService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.errorState = ErrorStates.NotSubmitted;\n    this.errorStates = ErrorStates; // private fields\n\n    this.unsubscribe = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n    this.isLoading$ = this.authService.isLoading$;\n  }\n\n  ngOnInit() {\n    this.initForm();\n  } // convenience getter for easy access to form fields\n\n\n  get f() {\n    return this.forgotPasswordForm.controls;\n  }\n\n  initForm() {\n    this.forgotPasswordForm = this.fb.group({\n      email: ['admin@demo.com', Validators.compose([Validators.required, Validators.email, Validators.minLength(3), Validators.maxLength(320) // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\n      ])]\n    });\n  }\n\n  submit() {\n    this.errorState = ErrorStates.NotSubmitted;\n    const forgotPasswordSubscr = this.authService.forgotPassword(this.f.email.value).pipe(first()).subscribe(result => {\n      this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\n    });\n    this.unsubscribe.push(forgotPasswordSubscr);\n  }\n\n}\n\nForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n  return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService));\n};\n\nForgotPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ForgotPasswordComponent,\n  selectors: [[\"app-forgot-password\"]],\n  decls: 26,\n  vars: 26,\n  consts: [[\"novalidate\", \"novalidate\", \"id\", \"kt_login_password_reset_form\", 1, \"form\", \"w-100\", \"fv-plugins-bootstrap5\", \"fv-plugins-framework\", 3, \"formGroup\", \"ngSubmit\"], [1, \"text-center\", \"mb-10\"], [1, \"text-dark\", \"mb-3\"], [1, \"text-gray-400\", \"fw-bold\", \"fs-4\"], [4, \"ngIf\"], [1, \"fv-row\", \"mb-10\"], [1, \"form-label\", \"fw-bolder\", \"text-gray-900\", \"fs-6\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", \"name\", \"email\", \"autocomplete\", \"off\", 1, \"form-control\", \"form-control-lg\", \"form-control-solid\", 3, \"ngClass\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"d-flex\", \"flex-wrap\", \"justify-content-center\", \"pb-lg-0\"], [\"type\", \"submit\", \"id\", \"kt_password_reset_submit\", 1, \"btn\", \"btn-lg\", \"btn-primary\", \"fw-bolder\", \"me-4\"], [1, \"indicator-label\"], [\"routerLink\", \"/auth/login\", \"id\", \"kt_login_password_reset_form_cancel_button\", 1, \"btn\", \"btn-lg\", \"btn-light-primary\", \"fw-bolder\"], [\"formError\", \"\"], [1, \"mb-lg-15\", \"alert\", \"alert-danger\"], [1, \"alert-text\", \"font-weight-bold\"], [1, \"mb-10\", \"bg-light-info\", \"p-8\", \"rounded\"], [1, \"text-info\"], [1, \"indicator-progress\"], [1, \"spinner-border\", \"spinner-border-sm\", \"align-middle\", \"ms-2\"], [1, \"fv-plugins-message-container\"], [1, \"fv-help-block\"], [\"role\", \"alert\"]],\n  template: function ForgotPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"h1\", 2);\n      i0.ɵɵtext(3, \"Forgotten Password ?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3);\n      i0.ɵɵtext(5, \" Enter your email to reset your password. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, ForgotPasswordComponent_ng_container_6_Template, 4, 0, \"ng-container\", 4);\n      i0.ɵɵtemplate(7, ForgotPasswordComponent_ng_container_7_Template, 4, 0, \"ng-container\", 4);\n      i0.ɵɵelementStart(8, \"div\", 5);\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementContainer(12, 8);\n      i0.ɵɵelementContainer(13, 8);\n      i0.ɵɵelementContainer(14, 8);\n      i0.ɵɵelementContainer(15, 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 9);\n      i0.ɵɵelementStart(17, \"button\", 10);\n      i0.ɵɵelementStart(18, \"span\", 11);\n      i0.ɵɵtext(19, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, ForgotPasswordComponent_ng_container_20_Template, 4, 0, \"ng-container\", 4);\n      i0.ɵɵpipe(21, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"a\", 12);\n      i0.ɵɵtext(23, \" Cancel \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(24, ForgotPasswordComponent_ng_template_24_Template, 1, 1, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(25);\n\n      i0.ɵɵproperty(\"formGroup\", ctx.forgotPasswordForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorState === ctx.errorStates.HasError);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorState === ctx.errorStates.NoError);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(15, _c0, ctx.forgotPasswordForm.controls[\"email\"].invalid, ctx.forgotPasswordForm.controls[\"email\"].valid));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(18, _c1, ctx.forgotPasswordForm.controls[\"email\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(20, _c2, ctx.forgotPasswordForm.controls[\"email\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(22, _c3, ctx.forgotPasswordForm.controls[\"email\"]));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r3)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(24, _c4, ctx.forgotPasswordForm.controls[\"email\"]));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(21, 13, ctx.isLoading$));\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.NgIf, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i3.NgClass, i3.NgTemplateOutlet, i4.RouterLinkWithHref],\n  pipes: [i3.AsyncPipe],\n  styles: [\"[_nghost-%COMP%] {\\n  width: 100%;\\n}\\n@media (min-width: 992px) {\\n  [_nghost-%COMP%]   .login-form[_ngcontent-%COMP%] {\\n    width: 100%;\\n    max-width: 450px;\\n  }\\n  [_nghost-%COMP%]   .login-form[_ngcontent-%COMP%]   .mat-form-field[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQUE7QUFDRjtBQUFFO0VBQ0U7SUFDRSxXQUFBO0lBQ0EsZ0JBQUE7RUFFSjtFQUFJO0lBQ0UsV0FBQTtFQUVOO0FBQ0YiLCJmaWxlIjoiZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xyXG4gICAgLmxvZ2luLWZvcm0ge1xyXG4gICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgbWF4LXdpZHRoOiA0NTBweDtcclxuXHJcbiAgICAgIC5tYXQtZm9ybS1maWVsZCB7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"sources":["/home/chandrayana/Documents/Projects/Other/Github/angular-demo-app/src/app/modules/auth/components/forgot-password/forgot-password.component.ts","/home/chandrayana/Documents/Projects/Other/Github/angular-demo-app/src/app/modules/auth/components/forgot-password/forgot-password.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { first } from 'rxjs/operators';\r\n\r\nenum ErrorStates {\r\n  NotSubmitted,\r\n  HasError,\r\n  NoError,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: FormGroup;\r\n  errorState: ErrorStates = ErrorStates.NotSubmitted;\r\n  errorStates = ErrorStates;\r\n  isLoading$: Observable<boolean>;\r\n\r\n  // private fields\r\n  private unsubscribe: Subscription[] = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\r\n  constructor(private fb: FormBuilder, private authService: AuthService) {\r\n    this.isLoading$ = this.authService.isLoading$;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() {\r\n    return this.forgotPasswordForm.controls;\r\n  }\r\n\r\n  initForm() {\r\n    this.forgotPasswordForm = this.fb.group({\r\n      email: [\r\n        'admin@demo.com',\r\n        Validators.compose([\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(320), // https://stackoverflow.com/questions/386294/what-is-the-maximum-length-of-a-valid-email-address\r\n        ]),\r\n      ],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.errorState = ErrorStates.NotSubmitted;\r\n    const forgotPasswordSubscr = this.authService\r\n      .forgotPassword(this.f.email.value)\r\n      .pipe(first())\r\n      .subscribe((result: boolean) => {\r\n        this.errorState = result ? ErrorStates.NoError : ErrorStates.HasError;\r\n      });\r\n    this.unsubscribe.push(forgotPasswordSubscr);\r\n  }\r\n}\r\n","<form\r\n  class=\"form w-100 fv-plugins-bootstrap5 fv-plugins-framework\"\r\n  novalidate=\"novalidate\"\r\n  [formGroup]=\"forgotPasswordForm\"\r\n  (ngSubmit)=\"submit()\"\r\n  id=\"kt_login_password_reset_form\"\r\n>\r\n  <!--begin::Title-->\r\n  <div class=\"text-center mb-10\">\r\n    <h1 class=\"text-dark mb-3\">Forgotten Password ?</h1>\r\n    <div class=\"text-gray-400 fw-bold fs-4\">\r\n      Enter your email to reset your password.\r\n    </div>\r\n  </div>\r\n  <!--end::Title-->\r\n\r\n  <!-- begin::Alert error-->\r\n  <ng-container *ngIf=\"errorState === errorStates.HasError\">\r\n    <div class=\"mb-lg-15 alert alert-danger\">\r\n      <div class=\"alert-text font-weight-bold\">\r\n        Sorry, looks like there are some errors detected, please try again.\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n  <!-- end::Alert error-->\r\n\r\n  <ng-container *ngIf=\"errorState === errorStates.NoError\">\r\n    <div class=\"mb-10 bg-light-info p-8 rounded\">\r\n      <!--begin::Body-->\r\n      <div class=\"text-info\">Sent password reset. Please check your email</div>\r\n      <!--end::Body-->\r\n    </div>\r\n  </ng-container>\r\n\r\n  <!--begin::Form group-->\r\n  <div class=\"fv-row mb-10\">\r\n    <label class=\"form-label fw-bolder text-gray-900 fs-6\">Email</label>\r\n    <input\r\n      class=\"form-control form-control-lg form-control-solid\"\r\n      type=\"email\"\r\n      formControlName=\"email\"\r\n      placeholder=\"Email\"\r\n      name=\"email\"\r\n      autocomplete=\"off\"\r\n      [ngClass]=\"{\r\n        'is-invalid': forgotPasswordForm.controls['email'].invalid,\r\n        'is-valid': forgotPasswordForm.controls['email'].valid\r\n      }\"\r\n    />\r\n\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"formError\"\r\n      [ngTemplateOutletContext]=\"{\r\n        validation: 'required',\r\n        message: 'Email is required',\r\n        control: forgotPasswordForm.controls['email']\r\n      }\"\r\n    ></ng-container>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"formError\"\r\n      [ngTemplateOutletContext]=\"{\r\n        validation: 'email',\r\n        message: 'Email is invalid',\r\n        control: forgotPasswordForm.controls['email']\r\n      }\"\r\n    ></ng-container>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"formError\"\r\n      [ngTemplateOutletContext]=\"{\r\n        validation: 'minLength',\r\n        message: 'Email should have at least 3 symbols',\r\n        control: forgotPasswordForm.controls['email']\r\n      }\"\r\n    ></ng-container>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"formError\"\r\n      [ngTemplateOutletContext]=\"{\r\n        validation: 'maxLength',\r\n        message: 'Email should have maximum 360 symbols',\r\n        control: forgotPasswordForm.controls['email']\r\n      }\"\r\n    ></ng-container>\r\n  </div>\r\n  <!--end::Form group-->\r\n  <!--begin::Form group-->\r\n  <div class=\"d-flex flex-wrap justify-content-center pb-lg-0\">\r\n    <button\r\n      type=\"submit\"\r\n      id=\"kt_password_reset_submit\"\r\n      class=\"btn btn-lg btn-primary fw-bolder me-4\"\r\n    >\r\n      <span class=\"indicator-label\">Submit</span>\r\n      <ng-container *ngIf=\"isLoading$ | async\">\r\n        <span class=\"indicator-progress\">\r\n          Please wait...\r\n          <span\r\n            class=\"spinner-border spinner-border-sm align-middle ms-2\"\r\n          ></span>\r\n        </span>\r\n      </ng-container>\r\n    </button>\r\n    <a\r\n      routerLink=\"/auth/login\"\r\n      id=\"kt_login_password_reset_form_cancel_button\"\r\n      class=\"btn btn-lg btn-light-primary fw-bolder\"\r\n    >\r\n      Cancel\r\n    </a>\r\n  </div>\r\n  <!--end::Form group-->\r\n</form>\r\n<!--end::Form-->\r\n\r\n<ng-template\r\n  #formError\r\n  let-control=\"control\"\r\n  let-message=\"message\"\r\n  let-validation=\"validation\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"control.hasError(validation) && (control.dirty || control.touched)\"\r\n  >\r\n    <div class=\"fv-plugins-message-container\">\r\n      <div class=\"fv-help-block\">\r\n        <span role=\"alert\">{{ message }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}